source('~/Github/Quicken/4-broker_import.R');
source('~/Github/Quicken/5-reconcile_positions.R');
source('~/Github/Quicken/6-reconcile_taxlots.R');
broker_import1();broker_import2();quicken_import1();quicken_import2();reconcile_positions();reconcile_positions();reconcile_taxlots();
View(broker_position);View(broker_taxlot);View(quicken_position);View(quicken_taxlot);View(compare_positions);View(compare_taxlots);
q()
getwd()
setwd("/Users/airvanilla/Github/Snippets")
ls()
dir
dir()
setwd("/Users/airvanilla/Github/reference")
getwd()
source('~/Github/reference/binary_operator.R')
"%div_minus_two%" <- function(left, right){
left / right - 2
}
12 %div_minus_two% 2
source('~/Github/reference/binary_operator.R')
rm(%p%)
rm("%p%")
source('~/Github/reference/binary_operator.R')
7 %% 4
remainder <- function(num, divisor = 2) {
rmdr <- num %% divisor
print(rmdr)
}
remainder(7, 3)
remainder(7, 2)
remainder(7, 4)
source('~/Github/reference/remainder.R')
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("cd ..")
setwd("..")
getwd()
source('~/Github/changewd.R')
source('~/Github/changewd.R')
source('~/Github/changewd.R')
source('~/Github/reference/binary_operator.R')
source('~/Github/reference/remainder.R')
source('~/Github/changewd.R')
source('~/Github/reference/changewd.R')
source('~/Github/reference/changewd.R')
source('~/Github/reference/remainder.R')
source('~/Github/reference/binary_operator.R')
source('~/Github/reference/binary_operator.R')
q()
tryingBandW <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
Hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
Mortality <- c(1, 2, 2, 3)
Ranking <- c("best", 2:(length(Mortality)-1), "worst")
Sample <- data.frame(cbind(Hospital, Mortality, Ranking))
Result <- Sample[Sample$Ranking == num, ]
Convert <- as.character(Result[,1])
print(as.vector(as.matrix((d[d$c == num, ][2]))))
}
tryingBandW()
tryingBandW <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
Hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
Mortality <- c(1, 2, 2, 3)
Ranking <- c("best", 2:(length(Mortality)-1), "worst")
Sample <- data.frame(cbind(Hospital, Mortality, Ranking))
Result <- Sample[Sample$Ranking == num, ]
Convert <- as.character(Result[,1])
print(as.vector(as.matrix((Convert[d$c == num, ][2]))))
}
tryingBandW()
tryingBandW <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
Hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
Mortality <- c(1, 2, 2, 3)
Ranking <- c("best", 2:(length(Mortality)-1), "worst")
Sample <- data.frame(cbind(Hospital, Mortality, Ranking))
Result <- Sample[Sample$Ranking == num, ]
Convert <- as.character(Result[,1])
print(as.vector(as.matrix((Convert[Convert$c == num, ][2]))))
}
tryingBandW()
tryingBandW <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
Hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
Mortality <- c(1, 2, 2, 3)
Ranking <- c("best", 2:(length(Mortality)-1), "worst")
Sample <- data.frame(cbind(Hospital, Mortality, Ranking))
Result <- Sample[Sample$Ranking == num, ]
Convert <<- as.character(Result[,1])
}
tryingBandW()
Convert
tryingBandW(2)
tryingBandW(3)
tryingBandW(4)
rankeddf <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
Hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
Mortality <- c(1, 2, 2, 3)
Ranking <- c("best", 2:(length(Mortality)-1), "worst")
Sample <- data.frame(cbind(Hospital, Mortality, Ranking))
Sample <- Sample[Sample$Ranking == num, ]
Sample <<- as.character(Sample[,1])
}
rm("Convert", "%div_minus_two%", "changewd", "remainder", "tryingBandW")
rankeddf <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
Hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
Mortality <- c(1, 2, 2, 3)
Ranking <- c("best", 2:(length(Mortality)-1), "worst")
Sample <- data.frame(cbind(Hospital, Mortality, Ranking))
Sample <- Sample[Sample$Ranking == num, ]
Sample <<- as.character(Sample[,1])
}
rankeddf()
rankeddf <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
mortality <- c(1, 2, 2, 3)
ranking <- c("best", 2:(length(Mortality)-1), "worst")
sample <- data.frame(cbind(Hospital, Mortality, Ranking))
sample <- sample[sample$Ranking == num, ]
sample <<- as.character(sample[,1])
}
rankeddf <- function(num = "best") {
## Create data frame with additional column that includes the data
## "best", 2..., "worst", then subset this new data frame by argument
## 'num'. The problem with this method is that when 'num' exceeds the
## maximum number of observations, the result isn't returning 'NA' as
## specified.
hospital <- c("Hospital A", "Hospital B", "Hospital C", "Hospital D")
mortality <- c(1, 2, 2, 3)
ranking <- c("best", 2:(length(mortality)-1), "worst")
sample <- data.frame(cbind(hospital, mortality, ranking))
sample <- sample[sample$ranking == num, ]
sample <<- as.character(sample[,1])
}
source('~/Github/reference/rankeddf.R')
source('~/Github/reference/rankeddf.R')
file_List <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
id < 1:332
id <- 1:332
file_List <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
source('~/Github/reference/importtool.R')
source('~/Github/reference/importtool.R')
trythisagain <- function(a) {
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
c <- c(rep(1, 3), rep(2, 4), rep(4, 3))
d <<- as.data.frame(cbind(a, b, c))
e <<- unique(c)
x <<- split(d, d$c)
g <<- lapply(x, function (x) cor(x[,1],x[,2], use="complete.obs"))
return(g)
}
trythisagain()
trythisagain(a)
a <<- rep("a", 10)
source('~/Github/reference/splitandapply.R')
source('~/Github/reference/splitandapply.R')
splitandapply()
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
c <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
d <<- as.data.frame(cbind(a, b, c))
e <<- unique(c)
x <<- split(d, d$c)
g <<- lapply(x, function (x) cor(x[,1],x[,2], use="complete.obs"))
rm(list =ls())
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
c <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
d <<- as.data.frame(cbind(a, b, c))
e <<- unique(c)
x <<- split(d, d$c)
rm(list =ls())
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- as.data.frame(cbind(a, b, c))
f <<- unique(c)
g <<- split(d, d$c)
h <<- lapply(x, function (x) cor(x[,1],x[,2], use="complete.obs"))
rm(list =ls())
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- as.data.frame(cbind(a, b, c))
f <<- unique(e)
g <<- split(d, d$c)
h <<- lapply(x, function (x) cor(x[,1],x[,2], use="complete.obs"))
rm(list =ls())
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- as.data.frame(cbind(a, b, c))
f <<- unique(e)
g <<- split(f, f$c)
h <<- lapply(x, function (x) cor(x[,1],x[,2], use="complete.obs"))
source('~/Github/reference/splitandapply.R')
f
rm(list =ls())
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- as.data.frame(cbind(a, b, d))
f <<- unique(e)
g <<- split(f, f$c)
h <<- lapply(x, function (x) cor(x[,1],x[,2], use="complete.obs"))
return(g)
e
f
e
complete.cases(e)
rm(list = ls())
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- as.data.frame(cbind(a, b, d))
g <<- split(e, f$c)
g <<- split(e, e$c)
e
?split
split(e, e$d)
source('~/Github/reference/splitandapply.R')
e
g
g <<- split(e, e$d)
g[1]
?average
ave
?ave
?ave
ave(g$2)
ave(g$3)
ave(g[1])
ave(e$2)
ave(e$3)
e
ave(e$d)
ave(e$d, FUN = mean)
mean(e$d)
class(e$d)
rm(list = ls())
source('~/Github/reference/splitandapply.R')
a <<- rep("a", 10)
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- cbind.data.frame(a, b, d))
e <<- cbind.data.frame(a, b, d))
e <<- cbind.data.frame(a, b, d)
class(e$d)
g <<- split(e, e$d)
mean(e$d)
rm(list =ls())
a <<- c(rep("a", 5), rep("b", 5))
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- cbind.data.frame(a, b, d)
g <<- split(e, e$d)
source('~/Github/reference/splitandapply.R')
a <<- c(rep("a", 5), rep("b", 5))
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- cbind.data.frame(a, b, d)
g <<- split(e, e$a)
h <<- lapply(g, function (x) ave(x[,1],x[,2], use="complete.obs"))
h
e
split(e, e$a)
rm(list=ls())
a <<- c(rep("a", 5), rep("b", 5))
b <<- c(11, 12, 13, NA, 15, 16, NA, 18, 19, 20)
d <<- c(rep(1, 3), rep(2, 4), rep(4, 3))
e <<- cbind.data.frame(a, b, d)
g <<- split(e, e$a)
?lapply
lapply(g, FUN = mean(, 3))
lapply(g, FUN = "mean")
lapply(g, function (x) mean(x[,3], use="complete.obs"))
source('~/Github/reference/splitandapply.R')
rm(list = ls())
source('~/Github/reference/splitandapply.R')
splitandapply()
h
source('~/Github/reference/splitandapply.R')
splitandapply()
source('~/Github/reference/splitandapply.R')
source('~/Github/reference/splitandapply.R')
source('~/Github/reference/splitandapply.R')
source('~/Github/reference/splitandapply.R')
rm(list = ls())
start.time <- Sys.time()
end.time <- Sys.time()
time.taken <- end.time - start.time
end.time - start.time
source('~/Github/reference/runtimetool.R')
runtimetool(10)
source('~/Github/reference/runtimetool.R')
source('~/Github/reference/runtimetool.R')
source('~/Github/reference/runtimetool.R')
source('~/Github/reference/runtimetool.R')
source('~/Github/reference/runtimetool.R')
?fund
?func
q()
telegram <- function(...){
print(paste("START", ..., "STOP"))
}
telegram("chalayane","me")
source('~/Github/reference/forloopfileimport.R')
forloopfileimport("/Users/airvanilla/Desktop")
source('~/Github/reference/forloopfileimport.R')
forloopfileimport("/Users/airvanilla/Desktop")
View(dat)
source('~/Github/reference/forloopfileimport.R')
rm(list =ls())
source('~/Github/reference/forloopfileimport.R')
forloopfileimport("/Users/airvanilla/Desktop")
View(dat)
source('~/Github/reference/forloopfileimport.R')
source('~/Github/reference/forloopfileimport.R')
rm(list = ls())
q()
q()
source('~/Github/reference/ellipsisinfunctions.R')
install.packages(c("highr", "purrr", "rlang", "rmarkdown", "stringi"))
install.packages("lintr")
install.packages("lintr")
lintr::lint("binary_operator.R")
source('~/Github/reference/binary_operator.R')
lintr::lint("binary_operator.R")
source('~/Github/reference/binary_operator.R')
lintr::lint("binary_operator.R")
source('~/Github/reference/binary_operator.R')
lintr::lint("binary_operator.R")
source('~/Github/reference/binary_operator.R')
lintr::lint("binary_operator.R")
source('~/Github/reference/binary_operator.R')
lintr::lint("binary_operator.R")
source('~/Github/reference/binary_operator.R')
lintr::lint("binary_operator.R")
lintr::lint("changewd.R")
lintr::lint("ellipsisinfunctions.R")
source('~/Github/reference/ellipsisinfunctions.R')
lintr::lint("ellipsisinfunctions.R")
source('~/Github/reference/ellipsisinfunctions.R')
lintr::lint("ellipsisinfunctions.R")
lintr::lint("importtool.R")
source('~/Github/reference/importtool.R')
lintr::lint("importtool.R")
source('~/Github/reference/importtool.R')
lintr::lint("importtool.R")
lintr::lint("rankeddf.R")
source('~/Github/reference/rankeddf.R')
lintr::lint("rankeddf.R")
source('~/Github/reference/rankeddf.R')
lintr::lint("rankeddf.R")
source('~/Github/reference/rankeddf.R')
lintr::lint("forloopfileimport.R")
source('~/Github/reference/forloopfileimport.R')
lintr::lint("forloopfileimport.R")
source('~/Github/reference/forloopfileimport.R')
lintr::lint("forloopfileimport.R")
source('~/Github/reference/forloopfileimport.R')
lintr::lint("forloopfileimport.R")
source('~/Github/reference/forloopfileimport.R')
lintr::lint("remainder.R")
source('~/Github/reference/remainder.R')
lintr::lint("remainder.R")
source('~/Github/reference/importtool.R')
lintr::lint("runtimetool.R")
source('~/Github/reference/runtimetool.R')
lintr::lint("runtimetool.R")
source('~/Github/reference/runtimetool.R')
lintr::lint("runtimetool.R")
source('~/Github/reference/runtimetool.R')
source('~/Github/reference/runtimetool.R')
lintr::lint("importtool.R")
source('~/Github/reference/importtool.R')
lintr::lint("importtool.R")
source('~/Github/reference/importtool.R')
lintr::lint("importtool.R")
lintr::lint("splitandapply.R")
source('~/Github/reference/splitandapply.R')
lintr::lint("splitandapply.R")
source('~/Github/reference/splitandapply.R')
lintr::lint("splitandapply.R")
source('~/Github/reference/splitandapply.R')
lintr::lint("splitandapply.R")
rm(list = ls())
source('~/Github/reference/functionasargument.R')
lintr::lint("functionasargument.R")
source('~/Github/reference/functionasargument.R')
lintr::lint("functionasargument.R")
source('~/Github/reference/functionasargument.R')
lintr::lint("functionasargument.R")
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
lintr::lint("projectenvironmentsetup.R")
source('~/Github/reference/projectenvironmentsetup.R')
source('~/Github/reference/runtimetool.R')
lintr::lint("runtimetool.R")
source('~/Github/reference/projectenvironmentsetup.R')
source('~/Github/reference/functionasargument.R')
source('~/Github/reference/splitandapply.R')
source('~/Github/reference/runtimetool.R')
source('~/Github/reference/remainder.R')
source('~/Github/reference/rankeddf.R')
source('~/Github/reference/importtool.R')
source('~/Github/reference/forloopfileimport.R')
source('~/Github/reference/ellipsisinfunctions.R')
source('~/Github/reference/changewd.R')
source('~/Github/reference/binary_operator.R')
rm(list = ls())
?list
args <- list(...)
x <- ...
define_args_in_func <- function(...){
args <- list(...)
arg1 <- args[["x"]]
arg2 <- args[["y"]]
arg3 <- args[["z"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("I set arguments", x, "and", y, "and", z, "the end.")
}
define_args_in_func(1, 2, 3)
define_args_in_func(x = 1, y = 2, z = 3)
define_args_in_func(x = "1", y = "2", z = "3")
define_args_in_func <- function(...){
args <- list(...)
arg1 <- args[["arg1"]]
arg2 <- args[["arg2"]]
arg3 <- args[["arg3"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("I set arguments", arg1, "and", arg2, "and", arg3, "the end.")
}
define_args_in_func(arg1 = "1", arg2 = "2", arg3 = "3")
lintr::lint("define_args_in_func.R")
lintr::lint("defineargsinfunc.R")
lintr::lint("defineargsinfunc.R")
defineargsinfunc <- function(...){
args <- list(...)
arg1 <- args[["arg1"]]
arg2 <- args[["arg2"]]
arg3 <- args[["arg3"]]
paste("Arguments", arg1, "and", arg2, "and", arg3, "are set.")
}
defineargsinfunc(arg1 = "1", arg2 = "2", arg3 = "3")
q()
q()
